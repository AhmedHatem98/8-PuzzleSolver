/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package puzzlesolver;

import java.util.ArrayList;
import java.util.Stack;

/**
 *
 * @author Ahmed Hatem
 */
public class DisplayPath extends javax.swing.JFrame {

    /**
     * Creates new form DisplayPath
     */
    public DisplayPath() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtArea.setColumns(20);
        txtArea.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1202, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 655, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DisplayPath.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DisplayPath.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DisplayPath.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DisplayPath.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DisplayPath().setVisible(true);
            }
        });
    }
    void display(InformedNode state,long time){
        InformedNode n = state;
        Stack<InformedNode> st = new Stack();
                ArrayList<String> movements = new ArrayList<>();
int x,i=0;
        String str ="";
        String temp ="";
        str += "MAIN PATH:\n\n";
        

    while(n.getParent()!=null){
st.push(n);
x = n.getState().indexOf("0")-n.getParent().getState().indexOf("0");
if(x==1)
    movements.add("Swapped Right with "+n.getState().charAt(n.getParent().getState().indexOf("0")));
else if(x== -1)
    movements.add("Swapped Left with "+n.getState().charAt(n.getParent().getState().indexOf("0")));
else if(x==3)
    movements.add("Swapped Down with "+n.getState().charAt(n.getParent().getState().indexOf("0")));
else 
    movements.add("Swapped Up with "+n.getState().charAt(n.getParent().getState().indexOf("0")));
    
n = n.getParent();

}
    st.push(n);
     temp = st.pop().getState();
    i = movements.size()-1;
  str+=" "+temp.substring(0,3)+"\n"+" "+temp.substring(3,6)+"\n"+" "+temp.substring(6,9)+"\n\n";
while(!st.empty()){
    temp = st.pop().getState();
  str+=" "+temp.substring(0,3)+"\n"+" "+temp.substring(3,6)+"\n"+" "+temp.substring(6,9);
  str+="                         "+movements.get(i)+"\n\n\n";

i--;

}
str+= "\nTotalcost = "+state.getDistanceCovered()+"\n"+"Expanded Nodes: "+Search.expandedNodes+"\nDepth = "+(state.getDistanceCovered()+1)+"\nRunning Time: "+Search.count+"\nExecution time: "+time+" millisec";

    txtArea.setText(str);
    
    }
 void display(Node state,long time){
        Node n = state;
        Stack<Node> st = new Stack();
        ArrayList<String> movements = new ArrayList<>();
        String str ="";
        String temp ="";
        int x,i=0;
        str += "MAIN PATH:\n\n";

    while(n.getParent()!=null){
st.push(n);
x = n.getState().indexOf("0")-n.getParent().getState().indexOf("0");
if(x==1)
    movements.add("Swapped Right with "+n.getState().charAt(n.getParent().getState().indexOf("0")));
else if(x== -1)
    movements.add("Swapped Left with "+n.getState().charAt(n.getParent().getState().indexOf("0")));
else if(x==3)
    movements.add("Swapped Down with "+n.getState().charAt(n.getParent().getState().indexOf("0")));
else 
    movements.add("Swapped Up with "+n.getState().charAt(n.getParent().getState().indexOf("0")));
    
n = n.getParent();

}
    st.push(n);
    Gui g = new Gui();
    g.states = st;
    temp = st.pop().getState();
    i = movements.size()-1;
  str+=" "+temp.substring(0,3)+"\n"+" "+temp.substring(3,6)+"\n"+" "+temp.substring(6,9)+"\n\n";
while(!st.empty()){
    temp = st.pop().getState();
  str+=" "+temp.substring(0,3)+"\n"+" "+temp.substring(3,6)+"\n"+" "+temp.substring(6,9);
  str+="                         "+movements.get(i)+"\n\n\n";

i--;
}
str+= "\nTotalcost = "+state.getTotalCost()+"\n"+"Expanded nodes= "+Search.expandedNodes+"\n"+"Depth = "+(state.getTotalCost()+1)+"\n"+"Running Time = "+Search.count+"\nExecution time= "+time+" millisec";

    txtArea.setText(str);
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtArea;
    // End of variables declaration//GEN-END:variables
}
